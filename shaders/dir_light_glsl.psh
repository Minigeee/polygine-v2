#define GLSL 1
#define Texture2DArray uniform sampler2DArray
#define cbuffer uniform
#define float4x4 mat4
#define float4   vec4
#define float3   vec3
#include "camera.fxh"
#include "material.fxh"

precision highp float;
precision highp int;
 
layout(input_attachment_index = 0, binding = 0) uniform highp subpassInput sp_colorTexture;
layout(input_attachment_index = 1, binding = 1) uniform highp subpassInput sp_depthTexture;
layout(input_attachment_index = 2, binding = 2) uniform highp subpassInput sp_normalTexture;
layout(input_attachment_index = 3, binding = 3) uniform highp subpassInput sp_materialTexture;

layout(location = 0) in vec3 in_lightDirection;
layout(location = 1) in vec3 in_lightColor;

layout(location = 0) out vec4 out_Color;

///////////////////////////////////////////////////////////
// === Constants for material properties (to be replaced with LUT/material system) ===
const vec3 F0_default = vec3(0.04);                // Dielectric base reflectivity

///////////////////////////////////////////////////////////
vec3 getFragPos(float depth) {
    vec2 uv = gl_FragCoord.xy * g_viewport.zw;
    vec4 clipPos = vec4(uv * vec2(2.0, -2.0) + vec2(-1.0, 1.0), depth, 1.0f);
    vec4 pos = g_invProjView * clipPos;

    return pos.xyz / pos.w;
}

void main() {
    float depth = subpassLoad(sp_depthTexture).x;
    if (depth == 1.0) {
        // Discard background pixels
        discard;
    }

    // Load subpass
    vec4 diffuseRoughness = subpassLoad(sp_colorTexture);
    vec4 normalEmissive = subpassLoad(sp_normalTexture);
    vec4 materialProps = subpassLoad(sp_materialTexture);
    vec3 normal = normalize(normalEmissive.xyz);

    // === Unpack material properties from G-buffer ===
    vec3 albedo = diffuseRoughness.rgb;
    float roughness = diffuseRoughness.a;
    float metallic = materialProps.r;
    float sss = materialProps.b;
    Material material = getMaterial(materialProps.a);

    // Reconstruct world position by applying inverse view-projection matrix
    vec3 worldPos = getFragPos(depth);
    vec3 lightDir = in_lightDirection;

    // === View vector (camera at origin in view space) ===
    vec3 viewPos = g_cameraPos.xyz; // Camera world pos
    vec3 V = normalize(viewPos - worldPos);
    vec3 L = -lightDir; // Light direction towards surface
    vec3 H = normalize(L + V);

    // === Custom diffuse calculation (preserved from your code) ===
    float diffFactor = 0.1f;
    float diff = dot(normal, L);
    float diff1 = diffFactor * diff + diffFactor;
    float diff2 = (1.0f - diffFactor) * diff + diffFactor;
    diff = (diff < 0.0f ? diff1 : diff2);

    // === Lambertian diffuse, metals have no diffuse ===
    vec3 diffuseColor = albedo * (1.0 - metallic);
    vec3 diffuse = diffuseColor * diff * in_lightColor.rgb;

    // === Specular (GGX-like, simplified) ===
    float NdotL = max(dot(normal, L), 0.0);
    float NdotV = max(dot(normal, V), 0.001);
    float NdotH = max(dot(normal, H), 0.0);
    float alpha = roughness * roughness;
    float D = alpha / (3.14159 * pow(pow(NdotH, 2.0) * (alpha - 1.0) + 1.0, 2.0));
    vec3 F0 = mix(F0_default, albedo, metallic);
    vec3 F = F0 + (1.0 - F0) * pow(1.0 - max(dot(H, V), 0.0), 5.0);
    float G = 0.5; // Simplified geometry term
    vec3 specular = D * F * G * material.specularIntensity;

    // === Subsurface scattering (simple wrap lighting) ===
    // Detect light passing through the surface toward the viewer
    float lightTransmission = max(dot(lightDir, -V), 0.0);
    // Mix in backlight spread based on material thickness
    float thickness = 1.0; // Could be stored in G-buffer or material params
    float backScatter = max(dot(lightDir, normal), 0.0) * thickness;
    float sssAmount = (lightTransmission + backScatter) * sss;
    vec3 subsurface = sssAmount * material.subsurfaceColor * in_lightColor.rgb;

    // === Final color ===
    vec3 color = diffuse + specular + subsurface;

    out_Color.rgb = color;
    out_Color.a = 1.0;
}