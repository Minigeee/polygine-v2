#define cbuffer uniform
#define float4x4 mat4
#define float4   vec4
#include "camera.fxh"

precision highp float;
precision highp int;
 
layout(input_attachment_index = 0, binding = 0) uniform highp subpassInput g_colorTexture;
layout(input_attachment_index = 1, binding = 1) uniform highp subpassInput g_depthTexture;
layout(input_attachment_index = 2, binding = 2) uniform highp subpassInput g_normalTexture;
layout(input_attachment_index = 3, binding = 3) uniform highp subpassInput g_materialTexture;

layout(location = 0) in  vec4 in_lightLocation;
layout(location = 1) in  vec3 in_lightColor;
layout(location = 2) in  vec3 in_lightCoeffs;

layout(location = 0) out vec4 out_Color;

///////////////////////////////////////////////////////////
struct Material {
    vec3 diffuse;
};

///////////////////////////////////////////////////////////////////////////////
vec3 getFragPos(float depth) {
    vec2 uv = gl_FragCoord.xy * g_viewport.zw;
    vec4 clipPos = vec4(uv * vec2(2.0, -2.0) + vec2(-1.0, 1.0), depth, 1.0f);
    vec4 pos = g_invProjView * clipPos;

    return pos.xyz / pos.w;
}

void main() {
    float depth = subpassLoad(g_depthTexture).x;
    if (depth == 1.0) {
        // Discard background pixels
        discard;
    }

    // Load subpass
    vec4 diffuseRougness = subpassLoad(g_colorTexture);
    vec4 normalEmmisive = subpassLoad(g_normalTexture);
    vec4 materialProps = subpassLoad(g_materialTexture);
    vec3 normal = normalEmmisive.xyz;
    
    Material material;
    material.diffuse = diffuseRougness.rgb;

    // Reconstruct world position by applying inverse view-projection matrix
    vec3 worldPos = getFragPos(depth);

    // Get distance to the light
    vec3 lightDir = worldPos - in_lightLocation.xyz;
    float distToLight = length(lightDir);
    lightDir /= distToLight;

    // Compute simple distance-based attenuation
    float attenuation = 1.0f / (in_lightCoeffs.x + in_lightCoeffs.y * distToLight + in_lightCoeffs.z * distToLight * distToLight);
    if (attenuation <= POINT_LIGHT_ATTENUATION_CUTOFF) {
        // The pixel is not affected by this light - discard it to
        // save bandwidth
        discard;
    }

    float diffFactor = 0.1f;
    
    // Get diffuse factor
    float diff = dot(normal, -lightDir);
    float diff1 = diffFactor * diff + diffFactor;
    float diff2 = (1.0f - diffFactor) * diff + diffFactor;
    diff = (diff < 0.0f ? diff1 : diff2);
        
    // Diffuse color
    vec3 diffuse = diff * in_lightColor.rgb * material.diffuse;

    // Load color from subpass input and apply light to it
    out_Color.rgb = diffuse * attenuation;

    out_Color.a = 1.0;
}